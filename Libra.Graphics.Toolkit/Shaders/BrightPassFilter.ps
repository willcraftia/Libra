//
// http://content.gpwiki.org/index.php/D3DBook:High-Dynamic_Range_Rendering
//

cbuffer PerObject : register(b0)
{
    float Threshold             : packoffset(c0);
    float Offset                : packoffset(c0.y);
    float MiddleGrey            : packoffset(c0.z);
    float MaxLuminanceSquared   : packoffset(c0.w);
};

Texture2D<float4> Texture               : register(t0);
Texture2D<float> LuminanceAverageMap    : register(t1);
SamplerState TextureSampler             : register(s0);
SamplerState LuminanceAverageMapSampler : register(s1);

float3 Tone(float3 color)
{
    float average = LuminanceAverageMap.Sample(LuminanceAverageMapSampler, float2(0.5f, 0.5f));
    float luminance = dot(float3(0.299f, 0.587f, 0.114f), color);
    float scaled = (luminance * MiddleGrey) / average;
    float compressed = (scaled * (1 + (scaled / MaxLuminanceSquared))) / (1 + scaled);

    compressed -= Threshold;
    compressed = max(compressed, 0);
    compressed = compressed / (Offset + compressed);

    return color * compressed;
}

float4 PS(float2 texCoord : TEXCOORD0) : SV_Target
{
    float4 color = Texture.Sample(TextureSampler, texCoord);

    float3 tone = Tone(color.rgb);

    return float4(tone, color.a);
}
