#define MAX_RADIUS 7
#define MAX_KERNEL_SIZE (MAX_RADIUS * 2 + 1)

cbuffer PerObject : register(b0)
{
    // 色の重みを決定する標準偏差
    float ColorSigma                    : packoffset(c0);
    // カーネル サイズ
    float KernelSize                    : packoffset(c0.y);
    // 空間の重み
    float SpaceWeights[MAX_KERNEL_SIZE] : packoffset(c1);
};

cbuffer PerRenderTarget : register(b1)
{
    // テクセル オフセット
    float2 Offsets[MAX_KERNEL_SIZE];
};

Texture2D<float4> Texture : register(t0);
SamplerState TextureSampler : register(s0);

float4 PS(float2 texCoord : TEXCOORD0) : SV_Target
{
    float4 center = Texture.Sample(TextureSampler, texCoord);

    float4 totalColor = 0;
    float totalWeight = 0;

    for (int i = 0; i < KernelSize; i++)
    {
        float4 sample = Texture.Sample(TextureSampler, texCoord + Offsets[i]);

        // 色の差から色の重みを算出。
        // 色差の式は状況により変更しても良い。
        float closeness = distance(center, sample);
        float colorWeight = exp(-closeness * closeness / (2 * ColorSigma * ColorSigma));

        // 重み = 空間の重み * 色の重み
        float weight = SpaceWeights[i] * colorWeight;

        totalColor += sample * weight;
        totalWeight += weight;
    }

    // 正規化して最終的な色を決定。
    return totalColor / totalWeight;
}
