cbuffer PerObject : register(b0)
{
    float Stiffness;
}

cbuffer PerRenderTarget : register(b1)
{
    // テクセル オフセット
    float2 Offsets[4];
}

cbuffer PerFrame : register(b2)
{
    // 全てテクスチャ座標系
    float2 NewPosition;
    float  NewRadius;
    float  NewVeclocity;
};

// 前フレームにおける波紋マップ。
// x: 高低
// y: 速度
Texture2D<float2> Texture : register(t0);
SamplerState TextureSampler : register(s0);

float4 PS(float2 texCoord : TEXCOORD0) : SV_Target0
{
    float2 c  = Texture.Sample(TextureSampler, texCoord);
    float2 s0 = Texture.Sample(TextureSampler, texCoord + Offsets[0]);
    float2 s1 = Texture.Sample(TextureSampler, texCoord + Offsets[1]);
    float2 s2 = Texture.Sample(TextureSampler, texCoord + Offsets[2]);
    float2 s3 = Texture.Sample(TextureSampler, texCoord + Offsets[3]);

    // フックの法則。
    float x = s0.x + s1.x + s2.x + s3.x - 4.0 * c.x;
    float f = Stiffness * x;

    float velocity = c.y + f;
    float height = c.x + velocity;

    if (distance(NewPosition, texCoord) <= NewRadius)
    {
        velocity += NewVeclocity;
    }

    return float4(height, velocity, 0, 0);
}
