// 参考: GPU Gems 2 - Chapter 19. Generic Refraction Simulation
//
// http://http.developer.nvidia.com/GPUGems2/gpugems2_chapter19.html

cbuffer PerObject : register(b0)
{
    // rgb: 拡散反射光 (乗算済みアルファ)。
    // a:   アルファ。
    float4   DiffuseColor           : packoffset(c0);

    // 環境光加算済み放射光。
    float3   EmissiveColor          : packoffset(c1);

    float3   SpecularColor          : packoffset(c2);
    float    SpecularPower          : packoffset(c2.w);

    float    RippleScale            : packoffset(c3);
    float    RefractionAttenuation  : packoffset(c3.y);
    float    ReflectionCoeff        : packoffset(c3.z);

    float4x4 WorldView              : packoffset(c4);
};

cbuffer PerFrame : register(b1)
{
    float2 Offset0          : packoffset(c0);
    float2 Offset1          : packoffset(c0.z);

    float3 LightDirection   : packoffset(c1);
};

cbuffer PerScene : register(b2)
{
    float3 FogColor;
};

Texture2D<float3> NormalMap0    : register(t0);
Texture2D<float3> NormalMap1    : register(t1);
Texture2D<float3> ReflectionMap : register(t2);
Texture2D<float3> RefractionMap : register(t3);

SamplerState NormalMapSampler       : register(s0);
SamplerState ReflectionMapSampler   : register(s1);
SamplerState RefractionMapSampler   : register(s2);

struct Input
{
    float4 Position     : SV_Position;
    float2 TexCoord     : TEXCOORD0;
    float4 PositionWV   : TEXCOORD1;
    float4 PositionWVP  : TEXCOORD2;
    float4 PositionWRP  : TEXCOORD3;
    float  FogFactor    : TEXCOORD4;
};

struct ColorPair
{
    float3 Diffuse;
    float3 Specular;
};

float2 ToTexCoord(float4 position)
{
    return position.xy / position.w * float2(0.5, -0.5) + float2(0.5, 0.5);
}

// フレネルの式 (Fresnel term): Schlick の近似 (Schlick's approximation)
float Fresnel(float nDotL, float reflectionCoeff)
{
    float fresnel = reflectionCoeff + (1.0f - reflectionCoeff) * pow(1.0f - nDotL, 5.0);
    return max(0, fresnel);
}

float3 SampleNormal(float2 texCoord)
{
    float3 normal0 = NormalMap0.SampleLevel(NormalMapSampler, texCoord + Offset0, 0);
    float3 normal1 = NormalMap1.SampleLevel(NormalMapSampler, texCoord + Offset1, 0);

    // サンプリングした二つの法線の平均。
    return (normal0 + normal1) / 2;
}

float3 ComputeRefrectionColor(float4 positionWVP, float2 offset, float eyeDistance, float nDotE)
{
    float2 texCoord = ToTexCoord(positionWVP) + offset;
    float3 color = RefractionMap.Sample(RefractionMapSampler, texCoord);

    // RefractionAttenuation は減衰開始距離。
    // 視点が遠い程に流体内 (屈折) は見えなくなり、
    // 拡散反射光に近づく。
    float distanceScale = saturate(RefractionAttenuation / eyeDistance);
    color = lerp(DiffuseColor.rgb, color, distanceScale);

    // 視点と法線が垂直に近い程に流体内 (屈折) が見えなくなり、
    // 拡散反射光に近づく。
    float facing = 1 - nDotE;
    color = lerp(color, DiffuseColor.rgb, facing);

    return color;
}

float3 ComputeReflectionColor(float4 positionWRP, float2 offset, float nDotE)
{
    // 反射マップ。
    float2 texCoord = ToTexCoord(positionWRP) + offset;
    float3 color = ReflectionMap.Sample(ReflectionMapSampler, texCoord);

    // フレネルの式に従い反射による色を決定。
    // ここでは視線を入射光とする。
    color *= Fresnel(nDotE, ReflectionCoeff);

    return color;
}

ColorPair ComputeLights(float3 E, float3 N)
{
    float3 L = mul(-LightDirection, (float3x3) WorldView);
    float nDotL = dot(L, N);
    float3 R = normalize(reflect(-E, N));

    float3 diffuse = max(0, nDotL) * DiffuseColor.rgb;
    float3 specular = pow(max(0, dot(R, L)), SpecularPower) * SpecularColor;

    ColorPair result;

    result.Diffuse = diffuse + EmissiveColor;
    result.Specular = specular;

    return result;
}

float4 PS(Input input) : SV_Target0
{
    float3 normal = SampleNormal(input.TexCoord);

    // 法線 (ビュー空間)。
    float3 N = normalize(mul(normal, (float3x3) WorldView));

    // 面から視点までの距離。
    float eyeDistance = length(input.PositionWV.xyz);

    // 面から視点への単位ベクトル (ビュー空間)。
    float3 E = normalize(-input.PositionWV.xyz);

    // 視点と法線のなす角。
    float nDotE = max(dot(E, N), 0);

    float2 offset = normal.xz * RippleScale;

    // 屈折。
    float3 color = ComputeRefrectionColor(input.PositionWVP, offset, eyeDistance, nDotE);

    // 反射。
    color += ComputeReflectionColor(input.PositionWRP, offset, nDotE);

    // ライティング。
    ColorPair lightResult = ComputeLights(E, N);
    color *= lightResult.Diffuse;
    color += lightResult.Specular * DiffuseColor.a;

    // フォグ。
    color.rgb = lerp(color.rgb, FogColor * DiffuseColor.a, input.FogFactor);

    return float4(color, DiffuseColor.a);
}
