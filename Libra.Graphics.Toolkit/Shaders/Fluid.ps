cbuffer PerObject : register(b0)
{
    float RippleScale;
};

cbuffer PerFrame : register(b1)
{
    float2 WaterOffset;
};

Texture2D<float3> NormalMap     : register(t0);
Texture2D<float4> ReflectionMap : register(t1);
Texture2D<float4> RefractionMap : register(t2);

SamplerState NormalMapSampler       : register(s0);
SamplerState ReflectionMapSampler   : register(s1);
SamplerState RefractionMapSampler   : register(s2);

struct Input
{
    float4 Position     : SV_Position;
    float2 TexCoord     : TEXCOORD0;
    float4 PositionWVP  : TEXCOORD1;
    float4 PositionWRP  : TEXCOORD2;
};

struct Output
{
    float4 Color : SV_Target0;
};

float2 ToTexCoord(float4 position)
{
    return position.xy / position.w * float2(0.5, -0.5) + float2(0.5, 0.5);
}

Output PS(Input input)
{
    Output output;

    float2 texCoord = input.TexCoord + WaterOffset;

    float3 normal = NormalMap.Sample(NormalMapSampler, input.TexCoord);
    normal = normalize(normal);

    float2 reflectionTexCoord = ToTexCoord(input.PositionWRP);
    float2 refractionTexCoord = ToTexCoord(input.PositionWVP);

    reflectionTexCoord += normal.xy * RippleScale;
    refractionTexCoord += normal.xy * RippleScale;

    float4 reflactionColor = ReflectionMap.Sample(ReflectionMapSampler, reflectionTexCoord);
    float4 refractionColor = RefractionMap.Sample(RefractionMapSampler, refractionTexCoord);

    output.Color = lerp(reflactionColor, refractionColor, 0.6f);

    return output;
}
